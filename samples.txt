// Teste simples co-rotina
{
  proc teste( ) {
	{
		var a = 1,
		cor teste2( ) {
			while not (a == 10) do
			write(a); a := a + 1; yield
		};
		resume teste2();
		write("Intervalo");
		resume teste2()
	}
  };
 call teste()
 }

// Teste escopo da variável
{
	cor teste2( ) {
		{
			proc novo(){
				{
					var a = 25;
					write (a)
				}
			},var a = 1;
			write (a);
			a := a + 1;
			yield;
			write(a);
			yield;
			call novo()
		}
	}, proc teste1(){
		{
			var a = 10;
			write (a)
		}
	}, var a = 15;
    
	resume teste2();
	call teste1();
	write (a);
	resume teste2();
	resume teste2()
}

// Teste escopo procedimento
{
	cor teste2( ) {
		{
			proc teste1(){
				{
					var a = 25;
					write (a)
				}
			};
			call teste1();
			yield;
			call teste1()
		}
	}, proc teste1(){
		{
			var a = 10;
			write (a)
		}
	};
    
	resume teste2();
	call teste1();
	resume teste2()
}

//Testes retorno de co-rotinas

{
	cor teste() : int{
		{
		var a = 1; 
		write(a); 
		yield a; 
		a := a + 1; 
		write(a);
		return a
		}
	}, 
	var b = 0; 
	b:= resume teste(); 
	write(b); 
	b := resume teste();
	write(b)
}

{
	cor teste() : int{
		{
		var a = 1, 
		cor teste2 () : int{
			a := 100;
			return a
		};
		resume teste2(); 
		write(a);
		return a
		}
	}, 
	var b = 0;
	b := resume teste();
	write(b)
}

//Teste Procedimento com retorno
{
	proc teste(){
		write("teste")
	},
	proc teste2 (int a): int{
		return a + a
	},
	var a = 0;
	call teste();
	a := call teste2(2);
	write(a)
}

//fibonacci
{
	cor fibonacci() : int{
		{
		var prev = 0,
		var curr = 1,
		var temp = 0;
		while true do
			yield curr;
			temp := prev;
			prev := curr;
			curr := prev + temp
		}
	},
	var rep = 0;
	while not rep == 5 do
		write(resume fibonacci());
		rep := rep + 1
}

// procedimento recursivo - ainda nao funciona por causa do operador *
{
	proc fatorial (int n): int{
		if n == 1 then
			return 1
		else return n * call fatorial(n-1)
	},
	var m = 0;
	m := call fatorial(2);
	write(m)
}

// procedimento recursivo que encontra o n-esimo numero de Fibonacci
{
	proc fib(int n): int{
		if n == 0 then
			return 0
		else 
		if n == 1 then
			return 1
		else  return call fib(n-1) + call fib(n-2)
	},
	var m = 0;
	m := call fib(6);
	write(m)
}


// exemplo baseado no anterior para ilustrar que nao eh possivel chamar
// uma corotina da mesma forma. o codigo abaixo lanca a excecao CorotinaNaoDeclaradaException  
{
	cor fib(int n): int{
		if n == 0 then
			return 0
		else 
		if n == 1 then
			return 1
		else  return resume fib(n-1) + resume fib(n-2)
	},
	var m = 0;
	m := resume fib(6);
	write(m)
}

// passagem de parametro para corotina
{
	proc run(){
		{
			var a = 1,
			cor corotina(string recebido){
				while not a == 3 do
					write(recebido);
					a := a +1;
					yield
			};
			resume corotina("Primeiro");
			write("Intervalo");
			resume corotina("Segundo")
		}
	};
	call run()
}

// exemplo baseado no anteior que mostra a chamada (resume) de uma corotina
// finalizada
{
	proc run(){
		{
			var a = 1,
			cor corotina(string recebido){
				while not a == 3 do
					write(recebido);
					a := a +1;
					yield
			};
			resume corotina("Primeiro");
			write("Intervalo");
			resume corotina("Segundo");
			write("Intervalo");
			resume corotina("Terceiro");
			write("Intervalo");
			resume corotina("Quarto")
		}
	};
	call run()
}

// exemplo mostrando encadeamento de retorno entre co-rotina e procedimento
{
	cor g(int x, int y): int {
		{
			cor k(int x, int y): int {
				yield x+y
			},
			proc h(int a, int b): int {
				return 3 + resume k(a,b)
			};
			return call h(x,y)
		}		
	},
	proc f(int x, int y): int {
		return resume g(x,y)		
	},
	var a = 0;
	a := call f(1,2);
	write(a)
}

// Generator
// Produz uma sequência de números pseudo-aleatórios
// Adaptado de: A Portable C++ Library for Coroutine Sequencing
{
	cor next():int{
		{
			var seed = 1;
			while true do
				seed := seed * 1103515245 + 12345;
				yield seed
		}
	},
	proc rand():int{
		return abs((resume next() / 65536) %  32768)
	},
	var i = 0;
	while not i == 10 do
		write(call rand());
		i := i + 1
}

// Exemplo produtor/consumidor
// Adaptado do livro Java How to Programming (10 Edition)
{
	var buffer = -1,
	cor produtor(){
		{
			var contador = 1;
			while not contador == 11 do
			buffer := contador;
			write("Produzido: ");
			write(buffer);
			contador := contador + 1;
			yield
		}
	},
	cor consumidor(){
		{
			var soma = 0,
			var contador = 1;
			while not contador == 11 do
				write("Consumido: ");
				write(buffer);
				soma := soma + buffer;
				contador := contador + 1;
				if contador == 11 then
					write("Total contabilizado: ");
					write(soma)
				else skip;
				yield
		}
	},
	var contador = 0;
	while not contador == 10 do
		resume produtor();
		resume consumidor();
		contador := contador + 1
}